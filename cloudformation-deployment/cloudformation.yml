Parameters:
  MyKey:
    Description: ssh key for ec2 instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  DynamoDBTableName:
    Type: String
    Default: movie-similarity-table
  LambdaRoleName:
    Type: String
    Default: lambda-dynamodb-IAMRole
  LambdaFunctionName:
    Type: String
    Default: load-into-dynamodb-function
  S3BucketName:
    Type: String
    Default: spark-qifan
  S3KeyName:
    Type: String
    Default: s3-to-dynamodb.zip
  PublicS3bucketName:
    Type: String
    Default: movie-similarity-bucket-xqf052

Resources:
  EmrLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub emr-log-bucket-${AWS::AccountId}-${AWS::StackName}

  EmrServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub emr-service-role-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: elasticmapreduce.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceRole

  EmrJobFlowRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub emr-job-flow-role-${AWS::StackName}
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonElasticMapReduceforEC2Role

  EmrJobFlowInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub emr-job-flow-instance-profile-${AWS::StackName}
      Path: /
      Roles:
        - !Ref EmrJobFlowRole

  EmrCluster:
    Type: AWS::EMR::Cluster
    Properties:
      Name: !Sub emr-cluster-${AWS::StackName}
      ServiceRole: !Ref EmrServiceRole
      JobFlowRole: !Ref EmrJobFlowInstanceProfile
      ReleaseLabel: emr-5.34.0
      VisibleToAllUsers: true
      LogUri: !Sub s3://aws-logs-${AWS::AccountId}-${AWS::Region}/elasticmapreduce/
      Applications:
        - Name: Hadoop
        - Name: Zeppelin
        - Name: Spark
      Instances:
        Ec2KeyName: !Ref MyKey
        # AdditionalMasterSecurityGroups:
        #   - !Ref EmrClusterSecurityGroup
        MasterInstanceGroup:
          InstanceCount: 1
          InstanceType: m3.xlarge
          Market: ON_DEMAND
          Name: Master
        CoreInstanceGroup:
          InstanceCount: 1
          InstanceType: m3.xlarge
          Market: ON_DEMAND
          Name: Core

  Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - ProcessingLambdaPermission
    Properties:
      BucketName: !Ref PublicS3bucketName
      AccessControl: PublicReadWrite
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt MylambdaFunction.Arn
            Filter:
              S3Key:
                Rules:
                - Name: suffix
                  Value: movie.json

  ProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref MylambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub 'arn:aws:s3:::${PublicS3bucketName}'
      SourceAccount: !Ref AWS::AccountId

  MyDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: !Ref  DynamoDBTableName
        AttributeDefinitions:
          - AttributeName: movie_id
            AttributeType: N
          - AttributeName: similar_movie_id
            AttributeType: N
        KeySchema:
          - AttributeName: movie_id
            KeyType: HASH
          - AttributeName: similar_movie_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST

  ExecutionLambda:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaRoleName
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess

  MylambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: load data into dynamodb table
      FunctionName: !Ref LambdaFunctionName
      Handler: s3-to-dynamodb.lambda_handler
      MemorySize: 256
      Role: !GetAtt 'ExecutionLambda.Arn'
      Runtime: python3.9
      Timeout: 300
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3KeyName


Outputs:
  # PublicId:
  #   Value:
  #     !GetAtt MyEC2Instance.PublicIp
  EmrDNS:
    Value:
      !GetAtt EmrCluster.MasterPublicDNS